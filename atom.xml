<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://jiggliemon.github.com/atom.xml" rel="self"/>
  <link href="http://jiggliemon.github.com/"/>
  <updated>2011-12-15T12:56:10-08:00</updated>
  <id>http://jiggliemon.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Class Constructors With Interface Enforcement In Mootools]]></title>
    <link href="http://jiggliemon.github.com/blog/2011/04/30/custom-class-constructors-with-interface-enforcement-in-mootools/"/>
    <updated>2011-04-30T00:00:00-07:00</updated>
    <id>http://jiggliemon.github.com/blog/2011/04/30/custom-class-constructors-with-interface-enforcement-in-mootools</id>
    <content type="html"><![CDATA[<p>Chris Pojer&#8217;s Interface class mutates a class, and inforces a well architected interface on your class.  The Interface is checked when the class&#8217;s &#8220;initialize&#8221; method is run. What we&#8217;re doing here is attaching a pre-defined interface to a new <code>Module</code> constructor.  This module constructor ensures that the <code>namespace</code> property is declared - an is a string; Also it states that <code>theother</code> property is a function.  This is how I enforce a particular class structure on the rest of the team for large scal projects.</p>

<p>For more information on this particular Interface mixin, look at <a href="http://cpojer.net/MooTools/interface/Demos/Example.js" target="_blank">this example</a> and download Chris Pojer&#8217;s interface <a href="https://github.com/cpojer/mootools-interface" target="_blank">here</a>.</p>

<pre><code>var TheModuleInterface = new Interface({
      namespace: String,
      theother: Function
});

var Module = new Type('Module', function (params){
    // Mind the order.  Your Interface needs to be the first argument when appending.
    params = Object.append({ Interface: TheModuleInterface }, params || {} ) ;
    return new Class(params);
});

var aModuleInstance = new Module({
    theother: "some string",
    namespace: {some:'object'},
    initialize: function(){
        // Remember your module needs an initialize method...
    }
});
var theMod = new Mod(); // Uncaught Error: Property "namespace" is implemented but not an instance of "String"
</code></pre>
]]></content>
  </entry>
  
</feed>
